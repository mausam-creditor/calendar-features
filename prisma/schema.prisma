// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model users {
  id         String              @id @default(cuid())
  first_name String
  last_name  String
  email      String              @unique
  password   String

  createdEvents   Event[]        @relation("EventCreator")
  eventParticipants EventParticipant[]
  reminders       Reminder[]
  groups          GroupMember[]
}

model groups {
  id             String           @id @default(cuid())
  name           String
  description    String?
  created_by     String
  createdAt      DateTime         @default(now())

  events         Event[]
  members        GroupMember[]
}

model GroupMember {
  id        String     @id @default(cuid())
  user_id   String
  group_id  String
  role      GroupRole  @default(MEMBER)
  joined_at DateTime   @default(now())

  user      users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group     groups     @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@unique([user_id, group_id])
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

model Event {
  id             String              @id @default(cuid())
  title          String
  description    String?
  startTime      DateTime
  endTime        DateTime
  location       String?
  isRecurring    Boolean             @default(false)
  calendarType   CalendarType
  visibility     Visibility          @default(PRIVATE)

  creatorId      String
  creator        users               @relation("EventCreator", fields: [creatorId], references: [id])

  groupId        String?
  group          groups?             @relation(fields: [groupId], references: [id])

  recurrenceRule RecurrenceRule?
  participants   EventParticipant[]
  reminder       Reminder[]
}

enum CalendarType {
  PERSONAL
  GROUP
  COURSE
}

enum Visibility {
  PRIVATE
  SHARED
  PUBLIC
}

model RecurrenceRule {
  id         String   @id @default(cuid())
  eventId    String   @unique
  frequency  Frequency
  interval   Int      @default(1)
  byDay      String?  // e.g., "2TU", "WEEK_BEFORE_LAST_TU"
  endDate    DateTime?
  count      Int?

  event      Event    @relation(fields: [eventId], references: [id])
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model EventParticipant {
  id       String         @id @default(cuid())
  eventId  String
  userId   String
  role     ParticipantRole @default(VIEWER)

  event    Event          @relation(fields: [eventId], references: [id])
  user     users          @relation(fields: [userId], references: [id])

 @@unique([eventId, userId])
}

enum ParticipantRole {
  HOST
  EDITOR
  VIEWER
}

model Reminder {
  id          String     @id @default(cuid())
  eventId     String
  userId      String?
  triggerTime DateTime
  method      ReminderMethod

  event       Event      @relation(fields: [eventId], references: [id])
  user        users?     @relation(fields: [userId], references: [id])
}

enum ReminderMethod {
  EMAIL
  PUSH
}
